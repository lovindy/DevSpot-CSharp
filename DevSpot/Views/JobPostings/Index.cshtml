@using Microsoft.AspNetCore.Identity
@model IEnumerable<DevSpot.Models.JobPosting>
@inject UserManager<IdentityUser> UserManager
@{
	var currentUserId = UserManager.GetUserId(User);
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
	<form id="antiForgeryForm">
		@Html.AntiForgeryToken()
	</form>
	<div class="flex justify-between items-center mb-8">
		<div>
			<h1 class="text-3xl font-bold text-gray-900">Developer Jobs</h1>
			<p class="text-gray-600 mt-2">Find your next opportunity in tech</p>
		</div>
		@if (User.IsInRole("Admin") || User.IsInRole("Employer"))
		{
			<a asp-action="Create" class="btn-primary">
				<svg class="inline-block w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
				</svg>
				Post a Job
			</a>
		}
	</div>

	<div id="alerts" class="mb-4"></div>

	<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
		@foreach (var job in Model)
		{
			<div class="job-card bg-white rounded-lg p-6" id="job-@job.Id">
				<div class="flex justify-between items-start mb-4">
					<h2 class="text-xl font-semibold text-gray-900">@job.Title</h2>
					<div class="flex items-center space-x-2">
						<span class="text-sm text-gray-500">@job.PostedDate.ToString("MMM dd")</span>
						@if (User.IsInRole("Admin") || (User.IsInRole("Employer") && job.UserId == currentUserId))
						{
							<div class="dropdown relative">
								<button class="p-1 hover:bg-gray-100 rounded-full" onclick="toggleDropdown(@job.Id)">
									<svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
									</svg>
								</button>
								<div id="dropdown-@job.Id" class="dropdown-menu hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
									<a asp-action="Edit" asp-route-id="@job.Id" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Edit</a>
									<button onclick="confirmDelete(@job.Id)" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Delete</button>
								</div>
							</div>
						}
					</div>
				</div>
				<h3 class="text-lg text-gray-700 mb-2">@job.Company</h3>
				<p class="text-gray-600 mb-2 flex items-center">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
					</svg>
					@job.Location
				</p>
				<p class="text-gray-600 mb-6">
					@(job.Description.Length > 150
									? job.Description.Substring(0, 147) + "..."
									: job.Description)
				</p>
				<div class="flex justify-between items-center">
					<a asp-action="Details" asp-route-id="@job.Id" class="btn-outline">View Details</a>
					@if (job.IsApproved)
					{
						<span class="badge badge-success">Approved</span>
					}
					else
					{
						<span class="badge badge-pending">Pending</span>
					}
				</div>
			</div>
		}
	</div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal">
	<div class="modal-content">
		<h2 class="text-xl font-bold mb-4">Confirm Delete</h2>
		<p class="mb-6">Are you sure you want to delete this job posting? This action cannot be undone.</p>
		<div class="flex justify-end space-x-4">
			<button onclick="closeDeleteModal()" class="btn-outline">Cancel</button>
			<button onclick="deleteJob()" class="btn-primary bg-red-600 hover:bg-red-700">Delete</button>
		</div>
	</div>
</div>

<style>
	.job-card {
		transition: all 0.2s ease;
		border: 1px solid #e1e4e8;
	}

		.job-card:hover {
			transform: translateY(-2px);
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
			border-color: #0366d6;
		}

	.badge {
		font-size: 12px;
		padding: 2px 8px;
		border-radius: 12px;
	}

	.badge-success {
		background-color: #2ea44f;
		color: white;
	}

	.badge-pending {
		background-color: #ffd33d;
		color: #24292e;
	}

	.btn-primary {
		background-color: #2ea44f;
		color: white;
		padding: 6px 16px;
		border-radius: 6px;
		font-weight: 500;
		display: inline-flex;
		align-items: center;
		text-decoration: none;
	}

		.btn-primary:hover {
			background-color: #2c974b;
			color: white;
		}

	.btn-outline {
		border: 1px solid #0366d6;
		color: #0366d6;
		padding: 4px 12px;
		border-radius: 6px;
		font-size: 14px;
		text-decoration: none;
	}

		.btn-outline:hover {
			background-color: #0366d6;
			color: white;
		}

	.dropdown-menu {
		border: 1px solid #e1e4e8;
		border-radius: 6px;
	}

	.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 50;
	}

	.modal-content {
		position: relative;
		background-color: white;
		margin: 15% auto;
		padding: 2rem;
		border-radius: 0.5rem;
		max-width: 500px;
	}

	.alert {
		padding: 1rem;
		border-radius: 0.5rem;
		margin-bottom: 1rem;
	}

	.alert-success {
		background-color: #d1fae5;
		border: 1px solid #34d399;
		color: #065f46;
	}

	.alert-error {
		background-color: #fee2e2;
		border: 1px solid #f87171;
		color: #991b1b;
	}
</style>

@section Scripts {
	<link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
	<script>
		let jobIdToDelete = null;

		function showAlert(message, type) {
			const alertsContainer = document.getElementById('alerts');
			const alert = document.createElement('div');
			alert.className = `alert alert-${type}`;
			alert.textContent = message;
			alertsContainer.appendChild(alert);

			// Remove alert after 5 seconds
			setTimeout(() => {
				alert.remove();
			}, 5000);
		}

		function toggleDropdown(jobId) {
			const dropdown = document.getElementById(`dropdown-${jobId}`);
			dropdown.classList.toggle('hidden');
		}

		// Close dropdowns when clicking outside
		window.addEventListener('click', function(event) {
			if (!event.target.closest('.dropdown')) {
				document.querySelectorAll('.dropdown-menu').forEach(menu => {
					menu.classList.add('hidden');
				});
			}
		});

		function confirmDelete(jobId) {
			jobIdToDelete = jobId;
			const modal = document.getElementById('deleteModal');
			modal.style.display = 'block';
		}

		function closeDeleteModal() {
			const modal = document.getElementById('deleteModal');
			modal.style.display = 'none';
			jobIdToDelete = null;
		}

		async function deleteJob() {
			if (!jobIdToDelete) return;

			try {
				// Get the token from the form
				const tokenElement = document.querySelector('form[id="antiForgeryForm"] input[name="__RequestVerificationToken"]');
				if (!tokenElement) {
					showAlert('Security token not found. Please refresh the page.', 'error');
					return;
				}

				const response = await fetch(`/JobPostings/Delete/${jobIdToDelete}`, {
					method: 'DELETE',
					headers: {
						'X-CSRF-TOKEN': tokenElement.value,
						'Content-Type': 'application/json',
						'Accept': 'application/json'
					}
				});

				let result;
				const contentType = response.headers.get("content-type");
				if (contentType && contentType.indexOf("application/json") !== -1) {
					result = await response.json();
				} else {
					throw new Error('Received non-JSON response from server');
				}

				if (response.ok && result.success) {
					// Remove the job posting from the DOM
					const jobCard = document.getElementById(`job-${jobIdToDelete}`);
					if (jobCard) {
						jobCard.remove();
						showAlert(result.message || 'Job posting deleted successfully', 'success');
					}
				} else {
					showAlert(result.message || 'Error deleting job posting', 'error');
				}
			} catch (error) {
				showAlert('Error deleting job posting: ' + (error.message || 'Unknown error'), 'error');
				console.error('Error:', error);
			}

			closeDeleteModal();
		}

		// Close modal when clicking outside
		window.addEventListener('click', function(event) {
			const modal = document.getElementById('deleteModal');
			if (event.target === modal) {
				closeDeleteModal();
			}
		});
	</script>
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}